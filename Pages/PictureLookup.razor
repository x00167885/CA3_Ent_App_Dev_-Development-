@using PexelsDotNetSDK.Api
@using PexelsDotNetSDK.Models

@page "/pictureLookup"
@inject PexelsClient pexelsClient
@inject LikePhotoService LikePhotoService
@inject StoredPhotosService StoredPhotosService

<PageTitle>Picture Lookup</PageTitle>

<!-- User options -->
<Container>
    <Row>
        <!-- Search input column -->
        <Column Size="ColumnSize.Is4" Class="d-flex flex-column justify-content-center">
            <div class="input-group">
                <InputText Placeholder="Search Images..." @bind-Value="searchQuery" class="form-control" />
                <Button Class="btn btn-primary" Clicked="SearchPhotos">Search</Button>
            </div>
        </Column>
        <!-- Slider column -->
        <Column Size="ColumnSize.Is4">
            <div class="d-flex flex-column align-items-center">
                <Paragraph Class="mb-0"> Image Amount: @photoCount</Paragraph>
                    <Slider @bind-Value="@photoCount" Min="1" Max="80" Step="1" />
                </div>
            </Column>
        <!-- Page Number input column -->
            <Column Size="ColumnSize.Is4">
                <div class="d-flex flex-column align-items-center">
                    @if (StoredPhotosService.PhotoPageNumber == 0)
                {
                    <Paragraph Class="mb-0"> Page Number: RANDOM</Paragraph>
                }
                else
                {
                    <Paragraph Class="mb-0"> Page Number: @StoredPhotosService.PhotoPageNumber</Paragraph>
                }
                <NumericPicker @bind-Value="@StoredPhotosService.PhotoPageNumber" ModifyValueOnWheel WheelOn="NumericWheelOn.Hover" Min="0" />
             </div>
         </Column>
     </Row>
 </Container>

 <!-- Rendered / Recieved Images-->
 @if (photos != null)
{
    if (StoredPhotosService.PhotosSearched & searchQuery != string.Empty)
    {
        <h2 class="text-center my-4">You searched for: @searchQuery</h2>
    }
    else
    {
        <h2 class="text-center my-4">Showing Weather Images</h2>
    }

    <Container>
        <Row>
            @foreach (var photo in photos.Select((value, index) => new { value, index }))
            {
                <Column Class="col-12 col-md-4 mb-4">
                    <p>@(photo.index + 1) Owner: @photo.value.photographer</p>
                    <div class="image-container position-relative">
                        <FigureImage Source="@photo.value.source.medium" Class="img-fluid rounded" @key=photo />
                        <Button Color="Color.Primary" Class="like-remove-button position-absolute" Clicked="@(() => LikePhoto(photo.value))">Like</Button>
                    </div>
                </Column>
            }
        </Row>
    </Container>
}

@code {
    private List<Photo>? photos;
    private string? searchQuery = string.Empty;
    private int photoCount = 6;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (StoredPhotosService.PhotosStored.Count == 0)
            {
                // We generate a random page number, so as so show random images on load.
                Random random = new();
                int RandomPageNumber = random.Next(1, 101);
                StoredPhotosService.PhotoPageNumber = RandomPageNumber;

                var result = await pexelsClient.SearchPhotosAsync("weather", page: StoredPhotosService.PhotoPageNumber, pageSize: photoCount);
                photos = result.photos.ToList();

                // Storing those photos
                StoredPhotosService.PhotosStored = photos;
            }
            else
            {
                // Tracking photos searched when navigating pages.
                photos = StoredPhotosService.PhotosStored;
                searchQuery = StoredPhotosService.PhotoSearchTerm;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error loading photos: {e.Message}");
        }
    }


    private async Task SearchPhotos()
    {
        try
        {
            photos?.Clear();

            // Allowing the user the ability to pick a random page number.
            if (StoredPhotosService.PhotoPageNumber == 0)
            {
                Random random = new();
                int RandomPageNumber = random.Next(1, 101);
                StoredPhotosService.PhotoPageNumber = RandomPageNumber;
            }

            if (searchQuery != string.Empty)
            {
                // Tracking that the user has searched, and what they searched for. (So to show again, on page revisit)
                StoredPhotosService.PhotosSearched = true;
                StoredPhotosService.PhotoSearchTerm = searchQuery;

                var result = await pexelsClient.SearchPhotosAsync(searchQuery, page: StoredPhotosService.PhotoPageNumber, pageSize: photoCount); 
                photos = result.photos.ToList();

                // Saying if we retrieve no photos for that page, just get the first page worth of images.
                if (photos.Count == 0) 
                {
                    var resultfail = await pexelsClient.SearchPhotosAsync(searchQuery, page: 1, pageSize: photoCount); 
                    photos = resultfail.photos.ToList();
                }

                // We still need to store those photos to prevent needless requests. (So to show them again, on page revisit)
                StoredPhotosService.PhotosStored = photos;
            }
            else
            {
                // Stop tracking, user did not search for anything. (Revert back to showing weather images)
                StoredPhotosService.PhotosSearched = false;
                StoredPhotosService.PhotoSearchTerm = string.Empty;

                if (StoredPhotosService.PhotosStored.Count == 0)
                {
                    var result = await pexelsClient.SearchPhotosAsync("weather", page: StoredPhotosService.PhotoPageNumber, pageSize: photoCount);
                    photos = result.photos.ToList();

                    // We still need to store those photos to prevent needless requests.
                    StoredPhotosService.PhotosStored = photos;
                }
                else
                {
                    // If we already have weather images, just load them back in.
                    photos = StoredPhotosService.PhotosStored;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching photos: {ex.Message}");
        }
    }




    private async Task LikePhoto(Photo photo)
    {
        if (!LikePhotoService.LikedPhotos.Contains(photo))
        {
            await Task.Run(() => LikePhotoService.AddLikedPhoto(photo));
        }
    }
}