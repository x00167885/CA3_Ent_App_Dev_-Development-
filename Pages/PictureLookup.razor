@using PexelsDotNetSDK.Api
@using PexelsDotNetSDK.Models

@page "/pictureLookup"
@inject PexelsClient pexelsClient
@inject LikePhotoService LikePhotoService
@inject StoredPhotosService StoredPhotosService

<PageTitle>Picture Lookup</PageTitle>

<Container>
    <Row>
        <!-- Search input column -->
        <Column Size="ColumnSize.Is6" Class="d-flex flex-column justify-content-center">
            <div class="input-group">
                <InputText Placeholder="Search Image..." @bind-Value="searchQuery" class="form-control" />
                <Button Class="btn btn-primary" Clicked="SearchPhotos">Search</Button>
            </div>
        </Column>
        <!-- Slider column -->
        <Column Size="ColumnSize.Is6">
            <div class="d-flex flex-column align-items-center">
                <Paragraph Class="mb-0"> Image Amount: @photoCount</Paragraph>
                    <Slider @bind-Value="@photoCount" Min="1" Max="80" Step="1" />
                </div>
            </Column>
        </Row>
    </Container>

    @if (photos != null)
{
    if (StoredPhotosService.PhotosSearched)
    {
        <h2 class="text-center my-4">You searched for: @searchQuery</h2>
    }
    else
    {
        <h2 class="text-center my-4">Showing Weather Images</h2>
    }

    <Container>
        <Row>
            @foreach (var photo in photos)
            {
                <Column Class="col-12 col-md-4 mb-4">
                    <p>Owner: @photo.photographer</p>
                    <div class="image-container position-relative">
                        <FigureImage Source="@photo.source.medium" Class="img-fluid rounded" @key=photo />
                        <Button Color="Color.Primary" Class="like-remove-button position-absolute" Clicked="@(() => LikePhoto(photo))">Like</Button>
                    </div>
                </Column>
            }
        </Row>
    </Container>
}

@code {
    private List<Photo>? photos;
    private string? searchQuery;
    private int photoCount = 6;
    private bool searched;

    // Called once component is loaded for demo data to display.
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (StoredPhotosService.PhotosStored.Count == 0)
            {
                Random random = new();
                int RandomPageNumber = random.Next(1, 101);

                var result = await pexelsClient.SearchPhotosAsync("weather", page: RandomPageNumber, pageSize: 6);
                photos = result.photos.ToList();

                StoredPhotosService.PhotosStored = photos;
            }
            else
            {
                // Tracking photos searched when navigating pages.
                photos = StoredPhotosService.PhotosStored;
                searchQuery = StoredPhotosService.PhotoSearchTerm;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error loading photos: {e.Message}");
        }
    }

    // Function for searching images on Pexels.
    private async Task SearchPhotos()
    {
        try
        {
            photos?.Clear();
            Random random = new();
            int RandomPageNumber = random.Next(1, 101);

            if (searchQuery != string.Empty)
            {
                // Tracking that the user has searched, and what they searched for.
                StoredPhotosService.PhotosSearched = true;
                StoredPhotosService.PhotoSearchTerm = searchQuery;

                var result = await pexelsClient.SearchPhotosAsync(searchQuery, page: RandomPageNumber, pageSize: photoCount); // Negative numbers and 0 handled by the API. Returns 1 image.
                photos = result.photos.ToList();

                if (photos.Count == 0) // Saying if we retrieve no photos, well then just get the first page worth of images.
                {
                    var resultfail = await pexelsClient.SearchPhotosAsync(searchQuery, page: 1, pageSize: photoCount); // Negative numbers and 0 handled by the API. Returns 1 image.
                    photos = resultfail.photos.ToList();
                }

                // We still need to store those photos to prevent needless requests.
                StoredPhotosService.PhotosStored = photos;
            }
            else
            {
                // Stop tracking, user did not search for anything.
                StoredPhotosService.PhotosSearched = false;
                StoredPhotosService.PhotoSearchTerm = string.Empty;

                if (StoredPhotosService.PhotosStored.Count == 0)
                {
                    var result = await pexelsClient.SearchPhotosAsync("weather", page: RandomPageNumber, pageSize: photoCount);
                    photos = result.photos.ToList();

                    // We still need to store those photos to prevent needless requests.
                    StoredPhotosService.PhotosStored = photos;
                }
                else
                {
                    photos = StoredPhotosService.PhotosStored;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching photos: {ex.Message}");
        }
    }

    private async Task LikePhoto(Photo photo)
    {
        if (!LikePhotoService.LikedPhotos.Contains(photo))
        {
            await Task.Run(() => LikePhotoService.AddLikedPhoto(photo));
        }
    }
}